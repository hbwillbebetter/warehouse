package com.design_pattern_23.creation;

public class Summary {

	/**
	 * 
	 * 简单工厂、工厂方法、抽象工厂之小结、区别
	 * 
	 * 
	 * 简单工厂
	 * 优点：
	 * （1）很明显，简单工厂的特点就是“简单粗暴”，通过一个含参的工厂方法，我们可以实例化任何产品类，
	 * 上至飞机火箭，下至土豆面条，无所不能。所以简单工厂有一个别名：上帝类。
	 * 
	 * 缺点：
	 * （1）任何”东西“的子类都可以被生产，负担太重。当所要生产产品种类非常多时，工厂方法的代码量可能会很庞大。
	 * （2）在遵循开闭原则（对拓展开放，对修改关闭）的条件下，简单工厂对于增加新的产品，无能为力。
	 * 因为增加新产品只能通过修改工厂方法来实现。工厂方法正好可以解决简单工厂的这两个缺点。
	 * 
	 * 
	 * 工厂方法
	 * 优点：
	 * （1）工厂方法模式就很好的减轻了工厂类的负担，把某一类/某一种东西交由一个工厂生产；（对应简单工厂的缺点1）
	 * （2）同时增加某一类”东西“并不需要修改工厂类，只需要添加生产这类”东西“的工厂即可，使得工厂类符合开放-封闭原则。
	 * 缺点：
	 * （1）相比简单工厂，实现略复杂。
	 * （2）对于某些可以形成产品族的情况处理比较复杂。对于缺点（2），我们可以借用抽象工厂来实现。
	 * 
	 * 
	 * 抽象工厂
	 * 优点：针对产品族；
	 * 缺点：针对产品族。所以，只有对应产品族的情况下，才需要使用抽象工厂模式。
	 * 
	 * 
	 * 区别
	 * 简单工厂 ： 用来生产同一等级结构中的任意产品。（不支持拓展增加产品）
	 * 工厂方法 ：用来生产同一等级结构中的固定产品。（支持拓展增加产品）
	 * 抽象工厂 ：用来生产不同产品族的全部产品。（不支持拓展增加产品；支持增加产品族）
	 * 
	 * 注意事项
	 * （1）工厂类常常采用单例模式（Singleton）。
	 * （2）工厂类拥有基类（定义共同接口），基类可以为纯虚类，也可以定义缺省方法。
	 * （3）对于工厂方法和抽象工厂，基类中的生产产品的函数常常为虚函数，以实现动态绑定。
	 * （4）调用工厂方法的函数通常采用工厂实现的指针和引用作为形参，以便根据不同的工厂实参调用不同的工厂方法。
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 */

}
